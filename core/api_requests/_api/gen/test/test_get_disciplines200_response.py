# coding: utf-8

"""
    API для интеграции с ботом судей

     ## Принципы работы  1) API `divisions` отдает филиалы 2) API `disicplines` отдает спортивные дисциплины 3) API `athletes` отдает список спортсменов с их дисциплинами и командами 4) API `tournaments` принимает состояние турнирной сетки для дисциплин с isTournament=true 5) API `results` принимает результаты конкретного соревнования 6) для гиревого спорта принимаются так же правки категории/веса  Дисциплины: * Легкая атлетика (100м, 2000м, 3000м) - id атлета, в конце результат время * Эстафета - id команды, в конце результат время * Гиревой спорт - id атлета, в конце результат очки (1 поднятие - 1 очко) (+ возможно вес?) * Футбол - id команды, во время игры результат очки (1 гол - 1 очко) + сетка после жеребьевки и после закрытия этапа * Волейбол - сетка, id команды, во время игры результат очки (1 сет - 1 очко) + сетка после жеребьевки и после закрытия этапа * Перетягивание канатов - id команды, в конце результат место * Дартс - id атлета, в конце результат место * Настольный теннис - id атлета, в конце результат место  ## Changelog  ### 2.0.0  * <font color=\"red\">**Breaking!**</font> Ресурс `accounts` переименован в `athletes` - [GET /referee-integration/api/v1/athletes](#operations-athletes-getAthletes) * <font color=\"red\">**Breaking!**</font> [GET /referee-integration/api/v1/disciplines](#operations-disciplines-getDisciplines) - удалил поля limit, categories, tournament, competition * [GET /referee-integration/api/v1/disciplines](#operations-disciplines-getDisciplines) - добавился тип результатов \"Место\" * <font color=\"red\">**Breaking!**</font> [POST /referee-integration/api/v1/results](#operations-results-createResult) - добавил обязательный disciplineId, competitionId - теперь внешний идентификатор из сетки * [POST /referee-integration/api/v1/results](#operations-results-createResult) - добавился тип результатов \"Место\" * [POST /referee-integration/api/v1/tournaments](#operations-tournaments-updateTournamentStages) - добавилось API для загрузки турнирной сетки  <details>  <summary>Предыдущие версии</summary>  ### 1.0.0  * Добавлен ресурс API divisions * Добавлен ресурс API disciplines * Добавлен ресурс API accounts * Добавлен ресурс API results  </details> 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_disciplines200_response import GetDisciplines200Response

class TestGetDisciplines200Response(unittest.TestCase):
    """GetDisciplines200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetDisciplines200Response:
        """Test GetDisciplines200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetDisciplines200Response`
        """
        model = GetDisciplines200Response()
        if include_optional:
            return GetDisciplines200Response(
                items = [
                    openapi_client.models.discipline.Discipline(
                        id = '', 
                        name = '', 
                        is_tournament = True, 
                        is_team = True, 
                        result_type = 'points', )
                    ]
            )
        else:
            return GetDisciplines200Response(
                items = [
                    openapi_client.models.discipline.Discipline(
                        id = '', 
                        name = '', 
                        is_tournament = True, 
                        is_team = True, 
                        result_type = 'points', )
                    ],
        )
        """

    def testGetDisciplines200Response(self):
        """Test GetDisciplines200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
